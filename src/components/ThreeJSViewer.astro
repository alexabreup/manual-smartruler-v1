---
const { 
  modelPath = '/smart4-tomadas-verm.glb',
  width = '100%',
  height = '500px'
} = Astro.props;
---

<div class="model-3d-viewer" data-model={modelPath} style={`width: ${width}; height: ${height};`}>
  <div class="model-container"></div>
  <div class="loading-text">Carregando modelo 3D...</div>
</div>

<script type="module">
document.addEventListener('DOMContentLoaded', async () => {
  const THREE = await import('three');
  const { GLTFLoader } = await import('three/examples/jsm/loaders/GLTFLoader.js');
  const { OrbitControls } = await import('three/examples/jsm/controls/OrbitControls.js');

  const viewers = document.querySelectorAll('.model-3d-viewer');
  
  viewers.forEach(viewer => {
    const container = viewer.querySelector('.model-container');
    const modelPath = viewer.getAttribute('data-model');
    const loadingText = viewer.querySelector('.loading-text');
    
    if (!container) return;
    
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf5f5f5);
    
    const camera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
    camera.position.set(4, 4, 4);
    
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.offsetWidth, container.offsetHeight);
    renderer.shadowMap.enabled = true;
    container.appendChild(renderer.domElement);
    
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    
    // Iluminação simples
    scene.add(new THREE.AmbientLight(0x404040, 0.6));
    const light = new THREE.DirectionalLight(0xffffff, 0.8);
    light.position.set(10, 10, 5);
    light.castShadow = true;
    scene.add(light);
    
    // Carregar modelo
    const loader = new GLTFLoader();
    loader.load(
      modelPath,
      (gltf) => {
        const model = gltf.scene;
        
        // Centralizar modelo
        const box = new THREE.Box3().setFromObject(model);
        const center = box.getCenter(new THREE.Vector3());
        model.position.sub(center);
        
        scene.add(model);
        loadingText.style.display = 'none';
        
        // Adicionar dica de controles
        const hint = document.createElement('div');
        hint.style.cssText = 'position: absolute; bottom: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white; padding: 8px; border-radius: 4px; font-size: 12px;';
        hint.textContent = 'Arraste para rotacionar • Scroll para zoom';
        container.appendChild(hint);
      },
      undefined,
      (error) => {
        console.error('Erro ao carregar modelo:', error);
        loadingText.textContent = 'Modelo não encontrado';
      }
    );
    
    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    
    function onResize() {
      camera.aspect = container.offsetWidth / container.offsetHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.offsetWidth, container.offsetHeight);
    }
    
    window.addEventListener('resize', onResize);
    animate();
  });
});
</script>

<style>
.model-3d-viewer {
  position: relative;
  margin: 1rem 0;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  overflow: hidden;
}

.model-container {
  width: 100%;
  height: 100%;
  position: relative;
}

.loading-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #666;
  font-size: 14px;
}
</style>