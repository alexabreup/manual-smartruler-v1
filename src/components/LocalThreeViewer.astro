---
const { 
  modelPath = '/smart4-tomadas-verm.glb',
  width = '100%',
  height = '500px'
} = Astro.props;
---

<div class="local-3d-viewer" data-model={modelPath} style={`width: ${width}; height: ${height};`}>
  <canvas class="viewer-canvas"></canvas>
  <div class="viewer-loading">Carregando modelo 3D...</div>
  <div class="viewer-error" style="display: none;">Erro ao carregar modelo</div>
</div>

<script>
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

// Aguardar o DOM estar pronto
document.addEventListener('DOMContentLoaded', () => {
  const viewers = document.querySelectorAll('.local-3d-viewer');
  
  viewers.forEach(viewerElement => {
    const canvas = viewerElement.querySelector('.viewer-canvas') as HTMLCanvasElement;
    const loading = viewerElement.querySelector('.viewer-loading') as HTMLElement;
    const errorDiv = viewerElement.querySelector('.viewer-error') as HTMLElement;
    const modelPath = viewerElement.getAttribute('data-model');
    
    if (!canvas || !loading || !errorDiv || !modelPath) return;
    
    try {
      // Configurar cena
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf5f5f5);
      
      // Configurar câmera
      const rect = canvas.getBoundingClientRect();
      const camera = new THREE.PerspectiveCamera(
        75, 
        rect.width / rect.height, 
        0.1, 
        1000
      );
      camera.position.set(4, 4, 4);
      
      // Configurar renderer
      const renderer = new THREE.WebGLRenderer({ 
        canvas: canvas,
        antialias: true 
      });
      renderer.setSize(rect.width, rect.height);
      renderer.shadowMap.enabled = true;
      
      // Configurar controles
      const controls = new OrbitControls(camera, canvas);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;
      
      // Adicionar iluminação
      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 10, 5);
      directionalLight.castShadow = true;
      scene.add(directionalLight);
      
      // Carregar modelo
      const loader = new GLTFLoader();
      
      loader.load(
        modelPath,
        // Sucesso
        (gltf) => {
          const model = gltf.scene;
          
          // Centralizar modelo
          const box = new THREE.Box3().setFromObject(model);
          const center = box.getCenter(new THREE.Vector3());
          model.position.sub(center);
          
          // Adicionar à cena
          scene.add(model);
          
          // Esconder loading
          loading.style.display = 'none';
          
          // Adicionar dica de controles
          const hint = document.createElement('div');
          hint.className = 'viewer-hint';
          hint.textContent = 'Arraste para rotacionar • Scroll para zoom';
          viewerElement.appendChild(hint);
          
          console.log('Modelo 3D carregado com sucesso!');
        },
        // Progresso
        (progress) => {
          if (progress.total > 0) {
            const percent = Math.round((progress.loaded / progress.total) * 100);
            loading.textContent = `Carregando: ${percent}%`;
          }
        },
        // Erro
        (error) => {
          console.error('Erro ao carregar modelo 3D:', error);
          loading.style.display = 'none';
          errorDiv.style.display = 'block';
          errorDiv.textContent = 'Modelo não encontrado. Verifique se o arquivo está em public/smart4-tomadas-verm.glb';
        }
      );
      
      // Loop de animação
      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      
      // Redimensionamento
      function handleResize() {
        const rect = canvas.getBoundingClientRect();
        const width = rect.width;
        const height = rect.height;
        
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        renderer.setSize(width, height);
      }
      
      window.addEventListener('resize', handleResize);
      
      // Iniciar animação
      animate();
      
    } catch (error) {
      console.error('Erro ao inicializar Three.js:', error);
      loading.style.display = 'none';
      errorDiv.style.display = 'block';
      errorDiv.textContent = 'Erro ao inicializar visualizador 3D';
    }
  });
});
</script>

<style>
.local-3d-viewer {
  position: relative;
  margin: 1rem 0;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  background: #f9f9f9;
}

.viewer-canvas {
  width: 100%;
  height: 100%;
  display: block;
}

.viewer-loading,
.viewer-error {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #666;
  font-size: 14px;
  text-align: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 4px;
}

.viewer-error {
  color: #e74c3c;
}

.viewer-hint {
  position: absolute;
  bottom: 10px;
  left: 10px;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 8px 12px;
  border-radius: 4px;
  font-size: 12px;
  pointer-events: none;
}

@media (max-width: 768px) {
  .viewer-hint {
    font-size: 11px;
    padding: 6px 8px;
  }
}
</style>