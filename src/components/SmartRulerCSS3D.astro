---
// Visualizador CSS 3D - Funciona sempre
---

<div class="viewer-3d">
  <div class="scene">
    <div class="smart-ruler">
      <!-- Base principal -->
      <div class="base"></div>
      
      <!-- Tomadas -->
      <div class="socket active" style="top: 20%;">
        <div class="holes">
          <div class="hole"></div>
          <div class="hole"></div>
          <div class="hole terra"></div>
        </div>
      </div>
      
      <div class="socket active" style="top: 40%;">
        <div class="holes">
          <div class="hole"></div>
          <div class="hole"></div>
          <div class="hole terra"></div>
        </div>
      </div>
      
      <div class="socket active" style="top: 60%;">
        <div class="holes">
          <div class="hole"></div>
          <div class="hole"></div>
          <div class="hole terra"></div>
        </div>
      </div>
      
      <div class="socket inactive" style="top: 80%;">
        <div class="holes">
          <div class="hole"></div>
          <div class="hole"></div>
          <div class="hole terra"></div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="controls">
    üñ±Ô∏è Clique e arraste para rotacionar | üì± Touch para mobile
  </div>
</div>

<style>
  .viewer-3d {
    width: 100%;
    height: 600px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 8px;
    position: relative;
    overflow: hidden;
    perspective: 1000px;
    margin: 2rem 0;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .scene {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    transform-style: preserve-3d;
  }

  .smart-ruler {
    position: relative;
    transform-style: preserve-3d;
    animation: rotate 20s linear infinite;
    cursor: grab;
  }

  .smart-ruler:active {
    cursor: grabbing;
    animation-play-state: paused;
  }

  .base {
    width: 80px;
    height: 280px;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border-radius: 8px;
    position: relative;
    box-shadow: 
      inset 2px 2px 5px rgba(255,255,255,0.1),
      inset -2px -2px 5px rgba(0,0,0,0.5),
      0 10px 20px rgba(0,0,0,0.3);
  }

  .socket {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    width: 50px;
    height: 40px;
    border-radius: 4px;
    z-index: 2;
    transition: all 0.3s ease;
  }

  .socket.active {
    background: linear-gradient(145deg, #FF5722, #D84315);
    box-shadow: 
      0 0 10px rgba(255, 87, 34, 0.5),
      inset 1px 1px 3px rgba(255,255,255,0.3),
      inset -1px -1px 3px rgba(0,0,0,0.3);
  }

  .socket.inactive {
    background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
    box-shadow: 
      inset 1px 1px 3px rgba(255,255,255,0.1),
      inset -1px -1px 3px rgba(0,0,0,0.5);
  }

  .holes {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    height: 100%;
    gap: 8px;
    padding: 5px;
  }

  .hole {
    width: 8px;
    height: 8px;
    background: radial-gradient(circle, #0a0a0a, #1a1a1a);
    border-radius: 50%;
    box-shadow: 
      inset 0 0 3px rgba(0,0,0,0.8),
      0 1px 1px rgba(255,255,255,0.1);
  }

  .hole.terra {
    width: 100%;
    margin-top: -4px;
  }

  .controls {
    position: absolute;
    bottom: 10px;
    left: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 12px;
  }

  @keyframes rotate {
    from { transform: rotateY(0deg) rotateX(10deg); }
    to { transform: rotateY(360deg) rotateX(10deg); }
  }

  /* Interatividade com mouse */
  .smart-ruler:hover {
    animation-play-state: paused;
    transform: rotateY(var(--mouse-x, 0deg)) rotateX(var(--mouse-y, 10deg)) scale(1.05);
  }

  /* Responsivo */
  @media (max-width: 768px) {
    .viewer-3d {
      height: 400px;
    }
    
    .base {
      width: 60px;
      height: 200px;
    }
    
    .socket {
      width: 40px;
      height: 30px;
    }
  }
</style>

<script>
  // Interatividade com mouse
  const ruler = document.querySelector('.smart-ruler');
  const viewer = document.querySelector('.viewer-3d');
  
  if (ruler && viewer) {
    let isMouseDown = false;
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let currentY = 10;

    function updateTransform() {
      ruler.style.transform = `rotateY(${currentX}deg) rotateX(${currentY}deg)`;
    }

    viewer.addEventListener('mousedown', (e) => {
      isMouseDown = true;
      startX = e.clientX;
      startY = e.clientY;
      ruler.style.animationPlayState = 'paused';
    });

    viewer.addEventListener('mousemove', (e) => {
      if (!isMouseDown) return;
      
      const deltaX = (e.clientX - startX) * 0.5;
      const deltaY = (e.clientY - startY) * 0.5;
      
      currentX = deltaX;
      currentY = 10 + deltaY;
      
      updateTransform();
    });

    viewer.addEventListener('mouseup', () => {
      isMouseDown = false;
    });

    viewer.addEventListener('mouseleave', () => {
      isMouseDown = false;
      ruler.style.animationPlayState = 'running';
    });

    // Touch para mobile
    viewer.addEventListener('touchstart', (e) => {
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
      ruler.style.animationPlayState = 'paused';
    });

    viewer.addEventListener('touchmove', (e) => {
      e.preventDefault();
      const touch = e.touches[0];
      const deltaX = (touch.clientX - startX) * 0.5;
      const deltaY = (touch.clientY - startY) * 0.5;
      
      currentX = deltaX;
      currentY = 10 + deltaY;
      
      updateTransform();
    });

    viewer.addEventListener('touchend', () => {
      ruler.style.animationPlayState = 'running';
    });
  }
</script>