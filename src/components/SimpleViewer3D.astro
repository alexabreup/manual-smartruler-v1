---
const { 
  modelPath = '/smart4-tomadas-verm.glb',
  width = '100%',
  height = '500px'
} = Astro.props;
---

<div class="simple-3d-viewer" data-model={modelPath} style={`width: ${width}; height: ${height};`}>
  <canvas class="viewer-canvas"></canvas>
  <div class="viewer-loading">Carregando modelo 3D...</div>
  <div class="viewer-error" style="display: none;">Erro ao carregar modelo</div>
</div>

<script>
// Aguardar DOM e carregar Three.js
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // Carregar Three.js via CDN
    const [THREE_MODULE, GLTF_MODULE, CONTROLS_MODULE] = await Promise.all([
      import('https://cdn.skypack.dev/three@0.158.0'),
      import('https://cdn.skypack.dev/three@0.158.0/examples/jsm/loaders/GLTFLoader.js'),
      import('https://cdn.skypack.dev/three@0.158.0/examples/jsm/controls/OrbitControls.js')
    ]);
    
    const THREE = THREE_MODULE;
    const { GLTFLoader } = GLTF_MODULE;
    const { OrbitControls } = CONTROLS_MODULE;
    
    // Inicializar visualizadores
    const viewers = document.querySelectorAll('.simple-3d-viewer');
    
    viewers.forEach(viewerElement => {
      const canvas = viewerElement.querySelector('.viewer-canvas');
      const loading = viewerElement.querySelector('.viewer-loading');
      const errorDiv = viewerElement.querySelector('.viewer-error');
      const modelPath = viewerElement.getAttribute('data-model');
      
      if (!canvas || !loading || !errorDiv || !modelPath) return;
      
      // Configurar cena
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf5f5f5);
      
      // Configurar câmera
      const rect = canvas.getBoundingClientRect();
      const camera = new THREE.PerspectiveCamera(75, rect.width / rect.height, 0.1, 1000);
      camera.position.set(4, 4, 4);
      
      // Configurar renderer
      const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
      renderer.setSize(rect.width, rect.height);
      renderer.shadowMap.enabled = true;
      
      // Configurar controles
      const controls = new OrbitControls(camera, canvas);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;
      
      // Adicionar iluminação
      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 10, 5);
      directionalLight.castShadow = true;
      scene.add(directionalLight);
      
      // Carregar modelo
      const loader = new GLTFLoader();
      
      loader.load(
        modelPath,
        (gltf) => {
          const model = gltf.scene;
          
          // Centralizar modelo
          const box = new THREE.Box3().setFromObject(model);
          const center = box.getCenter(new THREE.Vector3());
          model.position.sub(center);
          
          // Adicionar à cena
          scene.add(model);
          
          // Esconder loading
          loading.style.display = 'none';
          
          // Adicionar dica de controles
          const hint = document.createElement('div');
          hint.style.cssText = 'position: absolute; bottom: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white; padding: 8px 12px; border-radius: 4px; font-size: 12px; pointer-events: none;';
          hint.textContent = 'Arraste para rotacionar • Scroll para zoom';
          viewerElement.appendChild(hint);
          
          console.log('Modelo 3D carregado com sucesso!');
        },
        (progress) => {
          if (progress.total > 0) {
            const percent = Math.round((progress.loaded / progress.total) * 100);
            loading.textContent = `Carregando: ${percent}%`;
          }
        },
        (error) => {
          console.error('Erro ao carregar modelo 3D:', error);
          loading.style.display = 'none';
          errorDiv.style.display = 'block';
          errorDiv.textContent = 'Modelo não encontrado. Verifique se o arquivo está em public/smart4-tomadas-verm.glb';
        }
      );
      
      // Loop de animação
      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      
      // Redimensionamento
      function handleResize() {
        const rect = canvas.getBoundingClientRect();
        camera.aspect = rect.width / rect.height;
        camera.updateProjectionMatrix();
        renderer.setSize(rect.width, rect.height);
      }
      
      window.addEventListener('resize', handleResize);
      animate();
    });
    
  } catch (error) {
    console.error('Erro ao carregar Three.js:', error);
    
    // Mostrar erro em todos os visualizadores
    const viewers = document.querySelectorAll('.simple-3d-viewer');
    viewers.forEach(viewer => {
      const loading = viewer.querySelector('.viewer-loading');
      const errorDiv = viewer.querySelector('.viewer-error');
      
      if (loading) loading.style.display = 'none';
      if (errorDiv) {
        errorDiv.style.display = 'block';
        errorDiv.textContent = 'Erro ao carregar Three.js. Verifique sua conexão com a internet.';
      }
    });
  }
});
</script>

<style>
.simple-3d-viewer {
  position: relative;
  margin: 1rem 0;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  background: #f9f9f9;
}

.viewer-canvas {
  width: 100%;
  height: 100%;
  display: block;
}

.viewer-loading,
.viewer-error {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #666;
  font-size: 14px;
  text-align: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 4px;
}

.viewer-error {
  color: #e74c3c;
}

@media (max-width: 768px) {
  .simple-3d-viewer {
    height: 400px;
  }
}
</style>